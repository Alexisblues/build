diff --git a/arch/arm64/boot/dts/allwinner/sun50i-a64-olinuxino-1G.dts b/arch/arm64/boot/dts/allwinner/sun50i-a64-olinuxino-1G.dts
index 7b059ee64..698373678 100644
--- a/arch/arm64/boot/dts/allwinner/sun50i-a64-olinuxino-1G.dts
+++ b/arch/arm64/boot/dts/allwinner/sun50i-a64-olinuxino-1G.dts
@@ -337,6 +337,10 @@
 	status = "disabled";
 };
 
+&ths {
+	status = "okay";
+};
+
 &uart0 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&uart0_pb_pins>;
diff --git a/arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi b/arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi
index fe8312f87..1ec95442f 100644
--- a/arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi
+++ b/arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi
@@ -49,6 +49,7 @@
 #include <dt-bindings/reset/sun50i-a64-ccu.h>
 #include <dt-bindings/reset/sun8i-de2.h>
 #include <dt-bindings/reset/sun8i-r-ccu.h>
+#include <dt-bindings/thermal/thermal.h>
 
 / {
 	interrupt-parent = <&gic>;
@@ -137,6 +138,56 @@
 		};
 	};
 
+	thermal-zones {
+		cpu_thermal: cpu-thermal {
+			polling-delay-passive = <250>;
+			polling-delay = <1000>;
+			coefficients = <116 2170>;
+
+			thermal-sensors = <&ths 0>;
+
+			cooling-maps {
+				map0 {
+					trip = <&cpu_alert0>;
+					cooling-device = <&cpu0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+				map1 {
+					trip = <&cpu_alert1>;
+					cooling-device = <&cpu0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+							 <&cpu3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+			};
+
+			trips {
+				cpu_alert0: cpu_alert0 {
+					/* milliCelsius */
+					temperature = <75000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+
+				cpu_alert1: cpu_alert1 {
+					/* milliCelsius */
+					temperature = <90000>;
+					hysteresis = <2000>;
+					type = "hot";
+				};
+
+				cpu_crit: cpu_crit {
+					/* milliCelsius */
+					temperature = <110000>;
+					hysteresis = <2000>;
+					type = "critical";
+				};
+			};
+		};
+	};
+
 	cpu_opp_table: opp_table {
 		compatible = "operating-points-v2";
 		opp-shared;
@@ -819,6 +870,19 @@
 			status = "disabled";
 		};
 
+		ths: thermal@1c25000 {
+			#thermal-sensor-cells = <1>;
+			compatible ="allwinner,sun50i-a64-thermal";
+			reg = <0x01c25000 0x400>;
+			interrupts = <GIC_SPI 31 IRQ_TYPE_LEVEL_HIGH>;
+			assigned-clocks = <&ccu CLK_THS>;
+			assigned-clock-rates = <4000000>;
+			clocks = <&ccu CLK_BUS_THS>, <&ccu CLK_THS>;
+			clock-names = "bus", "mod";
+			resets = <&ccu RST_BUS_THS>;
+			status = "disabled";
+		};
+
 		uart0: serial@1c28000 {
 			compatible = "snps,dw-apb-uart";
 			reg = <0x01c28000 0x400>;
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index 486d682be..73fe22e45 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -28,6 +28,7 @@ thermal_sys-$(CONFIG_CLOCK_THERMAL)	+= clock_cooling.o
 thermal_sys-$(CONFIG_DEVFREQ_THERMAL) += devfreq_cooling.o
 
 # platform thermal drivers
+obj-m				+= sunxi_thermal.o
 obj-y				+= broadcom/
 obj-$(CONFIG_SPEAR_THERMAL)	+= spear_thermal.o
 obj-$(CONFIG_ROCKCHIP_THERMAL)	+= rockchip_thermal.o
diff --git a/drivers/thermal/sunxi_thermal.c b/drivers/thermal/sunxi_thermal.c
new file mode 100644
index 000000000..96e2dcc40
--- /dev/null
+++ b/drivers/thermal/sunxi_thermal.c
@@ -0,0 +1,363 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Thermal driver for Allwinner SoC
+ *
+ * Copyright (C) 2019 Olimex Ltd.
+ *   Author: Stefan Mavrodiev <stefan@olimex.com>
+ */
+// #define DEBUG
+#include <linux/clk.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/reset.h>
+#include <linux/thermal.h>
+
+#include "thermal_hwmon.h"
+
+#define SUNXI_THS_CTRL0		0x00
+#define SUNXI_THS_AQU0(val)		(val & 0xFFFF)
+#define SUNXI_THS_CTRL1		0x04
+#define SUNXI_THS_CAL_EN		BIT(17)
+#define SUNXI_THS_ADC_CDAT	0x14
+#define SUNXI_THS_CTRL2		0x40
+#define SUNXI_THS_AQU1(val)		((val & 0xFFFF) << 16)
+#define SUNXI_THS_EN(val)		BIT(val)
+#define SUNXI_THS_EN_MASK		GENMASK(2,0)
+#define SUNXI_THS_INT_CTRL	0x44
+#define SUNXI_THS_PER(val)		((val & 0xFFFFF) << 12)
+#define SUNXI_THS_INT_STA	0x48
+#define SUNXI_THS_INT_STA_MASK		0x777
+#define SUNXI_THS_FILT_CTRL	0x70
+#define SUNXI_THS_FILT_EN		BIT(2)
+#define SUNXI_THS_FILT_TYPE_2		(0)
+#define SUNXI_THS_FILT_TYPE_4		(1)
+#define SUNXI_THS_FILT_TYPE_8		(2)
+#define SUNXI_THS_FILT_TYPE_16		(3)
+#define SUNXI_THS_THS0_DATA	0x80
+#define SUNXI_THS_THS1_DATA	0x84
+#define SUNXI_THS_THS2_DATA	0x88
+#define SUNXI_THS_DATA(val)		(SUNXI_THS_THS0_DATA + (4 * val))
+
+#define SUNXI_THS_MAX_SENSORS	3
+#define SUN50I_A64_SENSORS	3
+#define SUN50I_H5_SENSORS	2
+
+// struct sunxi_thermal_data {
+// 	int				sensors_num;
+// };
+
+struct sunxi_thermal_sensor {
+	struct thermal_zone_device	*zone;
+	struct sunxi_thermal		*thermal;
+	enum thermal_device_mode	mode;
+	int				id;
+
+	int				slope;
+	int				offset;
+};
+
+struct sunxi_thermal {
+	struct device			*dev;
+	struct regmap			*regmap;
+
+	struct clk			*mod;
+	struct clk			*bus;
+	struct reset_control		*reset;
+
+	// const struct sunxi_thermal_data	*data;
+	unsigned long			sensors_num;
+	struct sunxi_thermal_sensor	sensors[SUNXI_THS_MAX_SENSORS];
+};
+
+static const struct regmap_config sunxi_thermal_regmap_config = {
+	.reg_bits = 32,
+	.val_bits = 32,
+	.reg_stride = 4,
+	.max_register = SUNXI_THS_THS2_DATA,
+
+	.cache_type = REGCACHE_NONE,
+};
+
+static int sunxi_thermal_runtime_resume(struct device *dev)
+{
+	struct sunxi_thermal *priv = dev_get_drvdata(dev);
+	struct sunxi_thermal_sensor *sensor;
+	int i, ret;
+
+	ret = clk_prepare_enable(priv->mod);
+	if (ret) {
+		dev_err(priv->dev, "failed to enable mod clock: %d\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(priv->bus);
+	if (ret) {
+		dev_err(priv->dev, "failed to enable bus: %d\n", ret);
+		goto err_disable_mod;
+	}
+
+	ret = reset_control_deassert(priv->reset);
+	if (ret) {
+		dev_err(priv->dev, "Couldn't deassert the device from reset: %d\n", ret);
+		goto err_disable_bus;
+	}
+
+	/* Init ths */
+	regmap_write(priv->regmap, SUNXI_THS_CTRL1, SUNXI_THS_CAL_EN);
+	regmap_write(priv->regmap, SUNXI_THS_CTRL0, SUNXI_THS_AQU0(0x190));
+	regmap_write(priv->regmap, SUNXI_THS_CTRL2, SUNXI_THS_AQU1(0x190));
+
+	/* Clear interrupt status */
+	regmap_write(priv->regmap, SUNXI_THS_INT_STA, SUNXI_THS_INT_STA_MASK);
+	regmap_write(priv->regmap, SUNXI_THS_FILT_CTRL, SUNXI_THS_FILT_EN | SUNXI_THS_FILT_TYPE_8);
+	regmap_write(priv->regmap, SUNXI_THS_INT_CTRL, SUNXI_THS_PER(0x18));
+
+	for (i = 0; i < priv->sensors_num; i++) {
+		sensor = &priv->sensors[i];
+
+		if (sensor->mode != THERMAL_DEVICE_ENABLED)
+			continue;
+
+		regmap_update_bits(priv->regmap,
+				   SUNXI_THS_CTRL2,
+				   SUNXI_THS_EN(i),
+				   SUNXI_THS_EN(i));
+
+		sensor->zone->ops->set_mode(sensor->zone,
+					    THERMAL_DEVICE_ENABLED);
+
+	};
+
+	return 0;
+
+err_disable_bus:
+	clk_disable_unprepare(priv->bus);
+err_disable_mod:
+	clk_disable_unprepare(priv->mod);
+
+	return ret;
+}
+
+static int sunxi_thermal_runtime_suspend(struct device *dev)
+{
+	struct sunxi_thermal *priv = dev_get_drvdata(dev);
+	struct sunxi_thermal_sensor *sensor;
+	int i;
+
+	for (i = 0; i < priv->sensors_num; i++) {
+		sensor = &priv->sensors[i];
+
+		sensor->zone->ops->set_mode(sensor->zone,
+					    THERMAL_DEVICE_DISABLED);
+	}
+
+
+
+	/* Disable all sensors */
+	regmap_update_bits(priv->regmap, SUNXI_THS_CTRL2, SUNXI_THS_EN_MASK, 0);
+
+	/* Disable clocks */
+	reset_control_assert(priv->reset);
+	clk_disable_unprepare(priv->bus);
+	clk_disable_unprepare(priv->mod);
+
+	return 0;
+}
+
+static int sunxi_get_temp(void *data, int *temperature)
+{
+	struct sunxi_thermal_sensor *sensor = data;
+	struct sunxi_thermal *priv = sensor->thermal;
+	int temp, slope, offset;
+	u32 val;
+
+	if (sensor->mode != THERMAL_DEVICE_ENABLED)
+		return -EAGAIN;
+
+
+	slope = thermal_zone_get_slope(sensor->zone);
+	offset = thermal_zone_get_offset(sensor->zone);
+
+	regmap_read(priv->regmap, SUNXI_THS_DATA(sensor->id), &val);
+
+	temp = (offset - val) * slope;
+
+	dev_dbg(priv->dev, "sensor: %d, temp: %d\n", sensor->id, temp);
+
+	if (temp < -40000 || temp > 180000)
+		return -EAGAIN;
+
+	*temperature = temp;
+	return 0;
+}
+
+static const struct thermal_zone_of_device_ops sunxi_thermal_ops = {
+	.get_temp = sunxi_get_temp,
+};
+
+static int sunxi_thermal_probe(struct platform_device *pdev)
+{
+	struct sunxi_thermal_sensor *sensor;
+	struct sunxi_thermal *priv;
+	struct resource *res;
+	void __iomem *base;
+	int ret;
+	int i;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	priv->mod = devm_clk_get(&pdev->dev, "mod");
+	if (IS_ERR(priv->mod)) {
+		ret = PTR_ERR(priv->mod);
+		dev_err(&pdev->dev, "failed to get mod clock: %d\n", ret);
+		return ret;
+	}
+
+	priv->bus = devm_clk_get(&pdev->dev, "bus");
+	if (IS_ERR(priv->bus)) {
+		ret = PTR_ERR(priv->bus);
+		dev_err(&pdev->dev, "failed to get bus clock: %d\n", ret);
+		return ret;
+	}
+
+	priv->reset = devm_reset_control_get_exclusive(&pdev->dev, NULL);
+	if (IS_ERR(priv->reset)) {
+		dev_err(&pdev->dev, "Couldn't get reset controller\n");
+		ret = PTR_ERR(priv->reset);
+		return ret;
+	}
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	priv->dev = &pdev->dev;
+
+	// priv->data = of_device_get_match_data(&pdev->dev);
+	// if (!priv->data)
+	// 	return -ENODEV;
+	priv->sensors_num = (unsigned long)of_device_get_match_data(&pdev->dev);
+
+	priv->regmap = devm_regmap_init_mmio(&pdev->dev, base,
+					     &sunxi_thermal_regmap_config);
+	if (IS_ERR(priv->regmap)) {
+		ret = PTR_ERR(priv->regmap);
+		dev_err(&pdev->dev, "failed to init regmap: %d\n", ret);
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, priv);
+
+	for (i = 0; i < priv->sensors_num; i++) {
+		sensor = &priv->sensors[i];
+
+		sensor->thermal = priv;
+		sensor->id = i;
+
+		sensor->zone =
+		devm_thermal_zone_of_sensor_register(&pdev->dev, i, sensor,
+						     &sunxi_thermal_ops);
+
+		if (IS_ERR(sensor->zone)) {
+			ret = PTR_ERR(sensor->zone);
+			if (ret == -ENODEV) {
+				ret = 0;
+				continue;
+			}
+			dev_err(&pdev->dev,
+				"failed to register sensor %d: %d\n", i, ret);
+			goto err_pm_disable;
+		}
+
+		sensor->zone->tzp->no_hwmon = false;
+		ret = thermal_add_hwmon_sysfs(sensor->zone);
+		if (ret) {
+			dev_err(&pdev->dev,
+				"failed to register hwmon %d: %d\n", i, ret);
+			thermal_zone_of_sensor_unregister(&pdev->dev,
+							  sensor->zone);
+			goto err_pm_disable;
+		}
+
+		sensor->mode = THERMAL_DEVICE_ENABLED;
+	}
+
+	ret = sunxi_thermal_runtime_resume(&pdev->dev);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't resume the device: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+
+err_pm_disable:
+	sunxi_thermal_runtime_suspend(&pdev->dev);
+
+	return ret;
+}
+
+static int sunxi_thermal_remove(struct platform_device *pdev)
+{
+	struct sunxi_thermal *priv = platform_get_drvdata(pdev);
+	struct sunxi_thermal_sensor *sensor;
+	int i;
+
+
+	for (i = 0; i < priv->sensors_num; i++) {
+		sensor = &priv->sensors[i];
+
+		if (sensor->mode != THERMAL_DEVICE_ENABLED)
+			continue;
+
+		thermal_remove_hwmon_sysfs(sensor->zone);
+		thermal_zone_of_sensor_unregister(&pdev->dev, sensor->zone);
+	};
+
+	sunxi_thermal_runtime_suspend(&pdev->dev);
+
+	return 0;
+}
+// struct sunxi_thermal_data sun50i_a64_thermal_data = {
+// 	.sensors_num  = 3,
+// };
+
+static const struct of_device_id sunxi_thermal_of_ids[] = {
+	{
+		.compatible = "allwinner,sun50i-a64-thermal",
+		.data = (void*)SUN50I_A64_SENSORS
+	},
+	{
+		.compatible = "allwinner,sun50i-h5-thermal",
+		.data = (void*)SUN50I_H5_SENSORS
+	},
+	{}
+};
+MODULE_DEVICE_TABLE(of, sunxi_thermal_of_ids);
+
+
+static const struct dev_pm_ops sunxi_thermal_pm_ops = {
+	.runtime_suspend = &sunxi_thermal_runtime_suspend,
+	.runtime_resume = &sunxi_thermal_runtime_resume,
+};
+
+static struct platform_driver sunxi_thermal_driver = {
+	.driver = {
+		.name = "sunxi-thermal",
+		.of_match_table = sunxi_thermal_of_ids,
+	},
+	.probe = sunxi_thermal_probe,
+	.remove = sunxi_thermal_remove,
+};
+module_platform_driver(sunxi_thermal_driver);
+
+MODULE_AUTHOR("Stefan Mavrodiev <stefan@olimex.com>");
+MODULE_DESCRIPTION("Allwinner thermal driver");
+MODULE_LICENSE("GPL");
